// Generated by CoffeeScript 1.3.3
(function() {
  var Runway, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('lodash');

  Runway = (function() {

    function Runway(attrs) {
      var attr, _i, _len;
      if (attrs == null) {
        attrs = [];
      }
      this._attributes = [];
      this._defaults = {};
      this._filters = {};
      for (_i = 0, _len = attrs.length; _i < _len; _i++) {
        attr = attrs[_i];
        this.attribute(attr);
      }
    }

    Runway.prototype.attribute = function(attribute, dft) {
      if (!(attribute && _.isString(attribute))) {
        throw new Error('Invalid attribute name ' + attribute);
      }
      if (dft || _.isBoolean(dft)) {
        this._defaults[attribute] = dft;
      }
      this._attributes.push(attribute);
      return this;
    };

    Runway.prototype.use = function(attribute, func) {
      var attr, _base, _i, _len, _ref, _ref1;
      if (!(__indexOf.call(this._attributes, attribute) >= 0 || attribute === 'all')) {
        throw new Error('Invalid attribute name' + attribute);
      }
      if (!_.isFunction(func)) {
        throw new Error('Filter is not a function');
      }
      if (!(func.length >= 1 && func.length <= 2)) {
        throw new Error('Invalid argument count, should be 1 or 2');
      }
      if (attribute === 'all') {
        _ref = this._attributes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          attr = _ref[_i];
          this.use(attr, func);
        }
        return this;
      }
      ((_ref1 = (_base = this._filters)[attribute]) != null ? _ref1 : _base[attribute] = []).push(func);
      return this;
    };

    Runway.prototype.run = function(attrs, callback) {
      var attributeQueue, errors, nextAttribute, result,
        _this = this;
      if (attrs == null) {
        attrs = {};
      }
      result = {};
      errors = {};
      attributeQueue = this._attributes.slice();
      nextAttribute = function() {
        var attribute, filterQueue, nextFilter, value, _ref;
        if (!(attribute = attributeQueue.shift())) {
          if (_.keys(errors).length === 0) {
            errors = null;
          }
          return callback(errors, result);
        }
        value = attrs[attribute] || _this._defaults[attribute];
        if (_.isUndefined(value)) {
          value = null;
        }
        filterQueue = ((_ref = _this._filters[attribute]) != null ? _ref.slice() : void 0) || [];
        nextFilter = function(err, val) {
          var filter, filtered, _ref1, _ref2;
          if (err) {
            ((_ref1 = errors[attribute]) != null ? _ref1 : errors[attribute] = []).push(err);
          }
          if (val) {
            value = val;
          }
          if (!(filter = filterQueue.shift())) {
            result[attribute] = value;
            return nextAttribute();
          }
          if (filter.length === 1) {
            try {
              filtered = filter(value);
              if (!_.isUndefined(filtered)) {
                value = filtered;
              }
            } catch (e) {
              if (e.name === 'TypeError') {
                throw e;
              }
              ((_ref2 = errors[attribute]) != null ? _ref2 : errors[attribute] = []).push(e);
            }
            return nextFilter();
          } else {
            return filter(value, nextFilter);
          }
        };
        return nextFilter();
      };
      return nextAttribute();
    };

    return Runway;

  })();

  module.exports = Runway;

}).call(this);
