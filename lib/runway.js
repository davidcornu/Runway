// Generated by CoffeeScript 1.3.3
(function() {
  var Runway,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Runway = (function() {

    function Runway(attrs) {
      var key, value;
      if (attrs == null) {
        attrs = {};
      }
      this._attributes = {};
      for (key in attrs) {
        value = attrs[key];
        if (__indexOf.call(this.attributes, key) >= 0) {
          this._attributes[key] = value;
        }
      }
      this._validators = [];
      this._errors = {};
      this._dirty = false;
      this._buildSetters();
      this._buildGetters();
      this.initialize();
    }

    Runway.prototype.initialize = function() {};

    Runway.prototype._buildSetters = function() {
      var attribute, _i, _len, _ref, _results,
        _this = this;
      _ref = this.attributes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attribute = _ref[_i];
        _results.push(this.__defineSetter__(attribute, function(val) {
          if (_this._attributes[attribute] !== val) {
            _this._dirty = true;
          }
          return _this._attributes[attribute] = val;
        }));
      }
      return _results;
    };

    Runway.prototype._buildGetters = function() {
      var attribute, _i, _len, _ref,
        _this = this;
      _ref = this.attributes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attribute = _ref[_i];
        this.__defineGetter__(attribute, function() {
          return _this._attributes[attribute];
        });
      }
      return this.__defineGetter__('errors', function() {
        return _this._errors;
      });
    };

    Runway.prototype.addValidator = function(callback) {
      if (typeof callback === 'function') {
        return this._validators.push(callback);
      }
    };

    Runway.prototype.addError = function(attribute, errorMessage) {
      var _base, _ref;
      if ((_ref = (_base = this._errors)[attribute]) == null) {
        _base[attribute] = [];
      }
      return this._errors[attribute].push(errorMessage);
    };

    Runway.prototype.validate = function(callback) {
      var next, validationQueue;
      this._errors = [];
      validationQueue = this._validators;
      next = function(model) {
        var validator;
        if (validationQueue.length === 0) {
          return callback(model);
        }
        validator = validationQueue.shift();
        return validator(model, next);
      };
      return next(this);
    };

    return Runway;

  })();

  module.exports = Runway;

}).call(this);
