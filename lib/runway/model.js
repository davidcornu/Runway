// Generated by CoffeeScript 1.3.3
(function() {
  var _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('lodash');

  exports.generate = function(klassName, schema) {
    var builder, klass;
    builder = new Function('schema', "return function " + klassName + "(values){\n  if(!values) var values = {};\n  this.schema = schema;\n  this.generateAttributes();\n  this.set(values);\n}");
    klass = builder(schema);
    klass.prototype.generateAttributes = function() {
      var Type, attribute, _ref, _results;
      this.attributes = {};
      _ref = this.schema.mapping;
      _results = [];
      for (attribute in _ref) {
        Type = _ref[attribute];
        _results.push(this[attribute] = new Type);
      }
      return _results;
    };
    klass.prototype.set = function(attribute, value) {
      var key, _results;
      if (_.isObject(attribute)) {
        _results = [];
        for (key in attribute) {
          value = attribute[key];
          if (__indexOf.call(_.keys(this.attributes), key) >= 0) {
            _results.push(this.attributes[attribute].set(value));
          } else {
            throw new Error("Attribute " + key + " is not defined");
          }
        }
        return _results;
      } else {
        if (__indexOf.call(_.keys(this.attributes), attribute) >= 0) {
          return this.attributes[attribute].set(value);
        } else {
          throw new Error("Attribute " + attribute + " is not defined");
        }
      }
    };
    klass.prototype.get = function(attribute) {
      if (__indexOf.call(_.keys(this.attributes), attribute) >= 0) {
        return this.attributes[attribute].value;
      } else {
        throw new Error("Attribute " + attribute + " is not defined");
      }
    };
    klass.prototype.toJSON = function() {
      var attribute, name, result, _i, _len, _ref;
      result = {};
      _ref = this.attributes;
      for (attribute = _i = 0, _len = _ref.length; _i < _len; attribute = ++_i) {
        name = _ref[attribute];
        result[name] = attribute.value;
      }
      return result;
    };
    return klass;
  };

}).call(this);
