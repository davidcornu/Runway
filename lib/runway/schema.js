// Generated by CoffeeScript 1.3.3
(function() {
  var Schema, asyncValidation, errors, s, syncValidation, types, validTypes, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('lodash');

  types = require('./types');

  errors = require('./errors');

  validTypes = _.keys(types);

  Schema = (function() {

    function Schema(structure) {
      if (structure == null) {
        structure = {};
      }
      this.mapping = {};
      this.validations = [];
      this.add(structure);
    }

    Schema.prototype.add = function(structure) {
      var attribute, type, _results;
      _results = [];
      for (attribute in structure) {
        type = structure[attribute];
        if (__indexOf.call(validTypes, type) >= 0) {
          _results.push(this.mapping[attribute] = types[type]);
        } else if (_.isObject(type)) {
          try {
            _results.push(this.mapping[attribute] = new Schema(type));
          } catch (e) {
            e.message = attribute + ": " + e.message;
            throw e;
          }
        } else {
          throw new errors.AttributeError(attribute);
        }
      }
      return _results;
    };

    Schema.prototype.remove = function(attribute) {
      return delete this.mapping[attribute];
    };

    Schema.prototype.addValidation = function(callback) {
      if (!_.isFunction(callback)) {
        throw new Error('Validation is not a function');
      }
      if (callback.length === 0 || callback.length > 2) {
        throw new Error('Validation has wrong number of arguments');
      }
      return this.validations.push(callback);
    };

    return Schema;

  })();

  module.exports = Schema;

  s = new Schema({
    firstName: 'String',
    lastName: 'String',
    single: 'Boolean',
    age: 'Number',
    preferences: {
      receiveNewsletter: 'Boolean',
      makeProfilePublic: 'Boolean'
    }
  });

  asyncValidation = function(options) {
    return function(model, done) {
      return setTimeout(function() {
        console.log('Async validation done!');
        return done();
      });
    };
  };

  syncValidation = function(options) {
    return function(model) {};
  };

  s.addValidation(asyncValidation('doodah'));

  s.addValidation(syncValidation('day'));

  console.log(s);

}).call(this);
