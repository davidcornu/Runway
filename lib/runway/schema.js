// Generated by CoffeeScript 1.3.3
(function() {
  var Schema, types, validTypes, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('lodash');

  types = require('./types');

  validTypes = _.map(_.keys(types), function(t) {
    return t.replace(/Runway/, '');
  });

  Schema = (function() {

    function Schema(structure) {
      if (structure == null) {
        structure = {};
      }
      this.mapping = {};
      this.validations = [];
      this.add(structure);
    }

    Schema.prototype.add = function(structure) {
      var attribute, type, _results;
      _results = [];
      for (attribute in structure) {
        type = structure[attribute];
        if (__indexOf.call(validTypes, type) >= 0) {
          _results.push(this.mapping[attribute] = types['Runway' + type]);
        } else if (_.isObject(type)) {
          _results.push(this.mapping[attribute] = new Schema(type));
        } else {
          throw new errors.AttributeError(attribute);
        }
      }
      return _results;
    };

    Schema.prototype.remove = function(attribute) {
      return delete this.mapping[attribute];
    };

    Schema.prototype.addValidation = function(callback) {
      if (!_.isFunction(callback)) {
        throw new Error('Validation is not a function');
      }
      if (callback.length === 0 || callback.length > 2) {
        throw new Error('Validation has wrong number of arguments');
      }
      return this.validations.push(callback);
    };

    return Schema;

  })();

  module.exports = Schema;

}).call(this);
