// Generated by CoffeeScript 1.3.3
(function() {
  var coercionError, _;

  _ = require('lodash');

  coercionError = function() {
    return new Error('Coercion error');
  };

  module.exports = {
    array: function(thing) {
      if (_.isArray(thing) || _.isNull(thing)) {
        return thing;
      }
      if (_.isString(thing) || _.isBoolean(thing) || _.isNumber(thing)) {
        return [thing];
      } else {
        throw coercionError();
      }
    },
    number: function(thing) {
      var attempt, isFloat, isInt, stripped;
      if (_.isNumber(thing) || _.isNull(thing)) {
        return thing;
      }
      if (!_.isString(thing)) {
        throw coercionError();
      }
      stripped = thing.replace(/\s+/g, '');
      isInt = /^\d+$/.test(stripped);
      isFloat = /^\d+\.\d+$/.test(stripped);
      if (!(isInt || isFloat)) {
        throw coercionError();
      }
      attempt = isInt ? parseInt(stripped) : parseFloat(stripped);
      if (_.isNaN(attempt)) {
        throw coercionError();
      }
      return attempt;
    },
    boolean: function(thing) {
      var stripped;
      if (_.isBoolean(thing) || _.isNull(thing)) {
        return thing;
      }
      if (!_.isString(thing)) {
        throw coercionError();
      }
      stripped = thing.replace(/\s+/g, '');
      switch (stripped) {
        case 'true':
          return true;
        case 'false':
          return false;
        default:
          throw coercionError();
      }
    },
    string: function(thing) {
      if (_.isString(thing) || _.isNull(thing)) {
        return thing;
      }
      if (_.isNumber(thing) || _.isBoolean(thing) || _.isDate(thing)) {
        return "" + thing;
      } else {
        throw coercionError();
      }
    },
    object: function(thing) {
      if (_.isObject(thing) || _.isNull(thing)) {
        return thing;
      }
      throw coercionError();
    }
  };

}).call(this);
